From bcc3ab4557849470fc5cc350b72552511dbfb0b8 Mon Sep 17 00:00:00 2001
From: Dmitry Rozhkov <dmitry.rozhkov@jollamobile.com>
Date: Mon, 21 Jan 2013 18:29:28 +0200
Subject: [PATCH 3/3] Add middleware for basic auth

---
 pootle/middleware/basicauth.py |   54 ++++++++++++++++++++++++++++++++++++++++
 1 file changed, 54 insertions(+)
 create mode 100644 pootle/middleware/basicauth.py

diff --git a/pootle/middleware/basicauth.py b/pootle/middleware/basicauth.py
new file mode 100644
index 0000000..005ec30
--- /dev/null
+++ b/pootle/middleware/basicauth.py
@@ -0,0 +1,54 @@
+"""Authentication code."""
+
+from django.conf import settings
+from django.http import HttpResponse
+from django.contrib.auth import authenticate, login, logout
+from django.core.exceptions import ImproperlyConfigured
+
+
+def basic_challenge(realm = None):
+    """Create 401 HttpResponse."""
+    if realm is None:
+        realm = getattr(settings, "BASIC_AUTH_REALM", "mbs")
+    response =  HttpResponse("Authorization Required", mimetype="text/plain")
+    response["WWW-Authenticate"] = 'Basic realm="%s"' % (realm)
+    response.status_code = 401
+    return response
+
+
+def basic_authenticate(authentication):
+    """Parse the authentication string and try to authenticate."""
+    # Taken from paste.auth
+
+    (authmeth, auth) = authentication.split(' ', 1)
+    if 'basic' != authmeth.lower():
+        return None
+    auth = auth.strip().decode('base64')
+    username, password = auth.split(':', 1)
+    return authenticate(username = username, password = password)
+
+
+class BasicAuthenticationMiddleware(object):
+    """Basic Authentication Middleware."""
+
+    def process_request(self, request):
+        """Process request."""
+
+        if not hasattr(request, "user"):
+            raise ImproperlyConfigured(
+                "The MBS basic auth middleware requires the"
+                " authentication middleware to be installed.  Update your"
+                " MIDDLEWARE_CLASSES setting to insert"
+                " 'django.contrib.auth.middleware.AuthenticationMiddleware'"
+                " before the BasicAuthenticationMiddleware class.")
+        if request.user.is_authenticated():
+            return
+
+        if not request.META.get("HTTP_AUTHORIZATION", None):
+            logout(request)
+            return basic_challenge()
+        user = basic_authenticate(request.META["HTTP_AUTHORIZATION"])
+        if user is None:
+            return basic_challenge()
+        else:
+            login(request, user)
-- 
1.7.10.4

